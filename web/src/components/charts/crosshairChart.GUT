<script>
  import BaseChart from './baseChart'

  var d3 = window.d3
  var techan = window.techan
  export default BaseChart.extend({
    name: 'crosshair-chart',
    data () {
      return {
        x: null,
        y: null,
        xAxis: null,
        yAxis: null,
        xTopAxis: null,
        yRightAxis: null,
        candlestick: null,
        ohlcRightAnnotation: null,
        timeAnnotation: null,
        ohlcAnnotation: null,
        timeTopAnnotation: null,
        svg: null,
        accessor: null
      }
    },
    props: {
      dimension: {
        width: 960,
        height: 500
      }
    },
    methods: {
      renderChart () {
        let _that = this

        let width = this.dimension.width - this.margin.left - this.margin.right
        let height = this.dimension.height - this.margin.top - this.margin.bottom
        this.x = techan.scale.financetime()
          .range([0, width])
        this.y = d3.scaleLinear()
          .range([height, 0])
        this.candlestick = techan.plot.candlestick()
          .xScale(this.x)
          .yScale(this.y)

        this.tradearrow = techan.plot.tradearrow()
          .xScale(this.x)
          .yScale(this.y)
          .y(function (d) {
            // Display the buy and sell arrows a bit above and below the price, so the price is still visible
            if (d.type === 'buy') return _that.y(d.low) + 5
            if (d.type === 'sell') return _that.y(d.high) - 5
            else return _that.y(d.price)
          })

        this.xAxis = d3.axisBottom(this.x)
        this.xTopAxis = d3.axisTop(this.x)
        this.yAxis = d3.axisLeft(this.y)
        this.yRightAxis = d3.axisRight(this.y)
        this.ohlcAnnotation = techan.plot.axisannotation()
          .axis(this.yAxis)
          .orient('left')
          .format(d3.format(',.2f'))
        this.ohlcRightAnnotation = techan.plot.axisannotation()
          .axis(this.yRightAxis)
          .orient('right')
          .translate([width, 0])
        this.timeAnnotation = techan.plot.axisannotation()
          .axis(this.xAxis)
          .orient('bottom')
          .format(d3.timeFormat('%Y-%m-%d'))
          .width(65)
          .translate([0, height])
        this.timeTopAnnotation = techan.plot.axisannotation()
          .axis(this.xTopAxis)
          .orient('top')
        let crosshair = techan.plot.crosshair()
          .xScale(this.x)
          .yScale(this.y)
          .xAnnotation([this.timeAnnotation, this.timeTopAnnotation])
          .yAnnotation([this.ohlcAnnotation, this.ohlcRightAnnotation])
        this.svg = d3.select(this.$el)
          .attr('width', width + this.margin.left + this.margin.right)
          .attr('height', height + this.margin.top + this.margin.bottom)
          .append('g')
          .attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')')
        this.accessor = this.candlestick.accessor()
        this.chartData = this.chartData.sort(function (a, b) {
          return d3.ascending(_that.accessor.d(a), _that.accessor.d(b))
        })
        this.x.domain(this.chartData.map(this.accessor.d))
        this.y.domain(techan.scale.plot.ohlc(this.chartData, this.accessor).domain())
        this.svg.append('g')
          .datum(this.chartData)
          .attr('class', 'candlestick')
          .call(this.candlestick)
        this.svg.append('g')
          .attr('class', 'x axis')
          .call(this.xTopAxis)
        this.svg.append('g')
          .attr('class', 'x axis')
          .attr('transform', 'translate(0,' + height + ')')
          .call(this.xAxis)
        this.svg.append('g')
          .attr('class', 'y axis')
          .call(this.yAxis)
        this.svg.append('g')
          .attr('class', 'y axis')
          .attr('transform', 'translate(' + width + ',0)')
          .call(this.yRightAxis)
        this.svg.append('g')
          .attr('class', 'y annotation left')
          .datum([{
            value: 74
          }, {
            value: 67.5
          }, {
            value: 58
          }, {
            value: 40
          }]) // 74 should not be rendered
          .call(this.ohlcAnnotation)
        this.svg.append('g')
          .attr('class', 'x annotation bottom')
          .datum([{
            value: this.x.domain()[30]
          }])
          .call(this.timeAnnotation)
        this.svg.append('g')
          .attr('class', 'y annotation right')
          .datum([{
            value: 61
          }, {
            value: 52
          }])
          .call(this.ohlcRightAnnotation)
        this.svg.append('g')
          .attr('class', 'x annotation top')
          .datum([{
            value: this.x.domain()[80]
          }])
          .call(this.timeTopAnnotation)
        this.svg.append('g')
          .attr('class', 'crosshair')
          .datum({
            x: this.x.domain()[80],
            y: 67.5
          })
          .call(crosshair)
          .each(function (d) {
            console.log('move(d)')
          }) // Display the current data
        this.svg.append('text')
          .attr('x', 5)
          .attr('y', 15)
          .text(this.title)
        this.svg.append('g')
          .attr('class', 'tradearrow')
          .attr('clip-path', 'url(#ohlcClip)')
        this.svg.select('g.tradearrow').datum(this.tradeData).call(this.tradearrow)
      }
    }
  })
</script>